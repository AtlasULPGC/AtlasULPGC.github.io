{"version":3,"sources":["../../../../ami/examples/viewers_upload/loader.js"],"names":["readMultipleFiles","evt","scene","camera","lut","camUtils","controls","loader","threeD","seriesContainer","target","files","length","document","getElementById","style","display","loadSequence","index","Promise","resolve","then","reject","myReader","FileReader","addEventListener","e","result","readAsArrayBuffer","buffer","parse","url","name","series","push","catch","error","window","console","log","loadSequenceGroup","fetchSequence","i","file","all","rawdata","loadSequenceContainer","data","dataGroups","dataUrl","parseUrl","extension","toUpperCase","mhdFile","filter","_filterByExtension","bind","rawFile","item"],"mappings":"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","file":"loader.js","sourcesContent":["import CoreUtils from 'base/core/core.utils';\r\nimport LoadersVolume from 'base/loaders/loaders.volume';\r\nimport handleSeries from './handleSeries';\r\n\r\n\r\n/**\r\n * Parse incoming files\r\n */\r\nexport default function readMultipleFiles(evt, scene, camera, lut, camUtils, controls) {\r\n\r\n    let loader = new LoadersVolume(threeD);\r\n    let seriesContainer = [];\r\n    // hide the upload button\r\n    if (evt.target.files.length) {\r\n        document.getElementById('home-container').style.display = 'none';\r\n    }\r\n\r\n    /**\r\n     * Load sequence\r\n     */\r\n    function loadSequence(index, files) {\r\n        return Promise.resolve()\r\n        // load the file\r\n            .then(function () {\r\n                return new Promise(function (resolve, reject) {\r\n                    let myReader = new FileReader();\r\n                    // should handle errors too...\r\n                    myReader.addEventListener('load', function (e) {\r\n                        resolve(e.target.result);\r\n                    });\r\n                    myReader.readAsArrayBuffer(files[index]);\r\n                });\r\n            })\r\n            .then(function (buffer) {\r\n                return loader.parse({url: files[index].name, buffer});\r\n            })\r\n            .then(function (series) {\r\n                seriesContainer.push(series);\r\n            })\r\n            .catch(function (error) {\r\n                window.console.log('oops... something went wrong...');\r\n                window.console.log(error);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Load group sequence\r\n     */\r\n    function loadSequenceGroup(files) {\r\n        const fetchSequence = [];\r\n\r\n        for (let i = 0; i < files.length; i++) {\r\n            fetchSequence.push(\r\n                new Promise((resolve, reject) => {\r\n                    const myReader = new FileReader();\r\n                    // should handle errors too...\r\n                    myReader.addEventListener('load', function (e) {\r\n                        resolve(e.target.result);\r\n                    });\r\n                    myReader.readAsArrayBuffer(files[i].file);\r\n                })\r\n                    .then(function (buffer) {\r\n                        return {url: files[i].file.name, buffer};\r\n                    })\r\n            );\r\n        }\r\n\r\n        return Promise.all(fetchSequence)\r\n            .then((rawdata) => {\r\n                return loader.parse(rawdata);\r\n            })\r\n            .then(function (series) {\r\n                seriesContainer.push(series);\r\n            })\r\n            .catch(function (error) {\r\n                window.console.log('oops... something went wrong...');\r\n                window.console.log(error);\r\n            });\r\n    }\r\n\r\n    const loadSequenceContainer = [];\r\n\r\n    const data = [];\r\n    const dataGroups = [];\r\n    // convert object into array\r\n    for (let i = 0; i < evt.target.files.length; i++) {\r\n        let dataUrl = CoreUtils.parseUrl(evt.target.files[i].name);\r\n        if (dataUrl.extension.toUpperCase() === 'MHD' ||\r\n            dataUrl.extension.toUpperCase() === 'RAW') {\r\n            dataGroups.push(\r\n                {\r\n                    file: evt.target.files[i],\r\n                    extension: dataUrl.extension.toUpperCase(),\r\n                });\r\n        } else {\r\n            data.push(evt.target.files[i]);\r\n        }\r\n    }\r\n\r\n    // check if some files must be loaded together\r\n    if (dataGroups.length === 2) {\r\n        // if raw/mhd pair\r\n        const mhdFile = dataGroups.filter(_filterByExtension.bind(null, 'MHD'));\r\n        const rawFile = dataGroups.filter(_filterByExtension.bind(null, 'RAW'));\r\n        if (mhdFile.length === 1 &&\r\n            rawFile.length === 1) {\r\n            loadSequenceContainer.push(\r\n                loadSequenceGroup(dataGroups)\r\n            );\r\n        }\r\n    }\r\n\r\n    // load the rest of the files\r\n    for (let i = 0; i < data.length; i++) {\r\n        loadSequenceContainer.push(\r\n            loadSequence(i, data)\r\n        );\r\n    }\r\n\r\n    // run the load sequence\r\n    // load sequence for all files\r\n    Promise\r\n        .all(loadSequenceContainer)\r\n        .then(function () {\r\n            handleSeries(seriesContainer, loader, scene, camera, lut, camUtils, controls);\r\n        })\r\n        .catch(function (error) {\r\n            window.console.log('oops... something went wrong...');\r\n            window.console.log(error);\r\n        });\r\n}\r\n\r\nfunction _filterByExtension(extension, item) {\r\n    if (item.extension.toUpperCase() === extension.toUpperCase()) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n"]}