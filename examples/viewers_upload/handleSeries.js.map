{"version":3,"sources":["../../../../ami/examples/viewers_upload/handleSeries.js"],"names":["handleSeries","seriesContainer","loader","scene","camera","lut","camUtils","controls","free","stack","mergeSeries","stackHelper","bbox","visible","borderColor","border","add","console","log","worldbb","worldBoundingBox","lpsDims","THREE","Vector3","box","center","worldCenter","clone","halfDimensions","x","y","z","canvas","width","threeD","clientWidth","height","clientHeight","directions","xCosine","yCosine","zCosine","update","fitBox","updateLabels","directionsLabel","modality","hookCallbacks"],"mappings":";;;;;kBAMwBA,Y;;AANxB;;;;AACA;;;;;;AAEA;;;AAGe,SAASA,YAAT,CAAsBC,eAAtB,EAAuCC,MAAvC,EAA+CC,KAA/C,EAAsDC,MAAtD,EAA8DC,GAA9D,EAAmEC,QAAnE,EAA6EC,QAA7E,EAAuF;AAClG;AACAL,WAAOM,IAAP;AACAN,aAAS,IAAT;AACA;AACA;AACA,QAAIO,QAAQR,gBAAgB,CAAhB,EAAmBS,WAAnB,CAA+BT,eAA/B,EAAgD,CAAhD,EAAmDQ,KAAnD,CAAyD,CAAzD,CAAZ;;AAEA,QAAIE,cAAc,sBAAiBF,KAAjB,CAAlB;AACAE,gBAAYC,IAAZ,CAAiBC,OAAjB,GAA2B,KAA3B;AACAF,gBAAYG,WAAZ,GAA0B,SAA1B;AACAH,gBAAYI,MAAZ,CAAmBF,OAAnB,GAA6B,KAA7B;AACAV,UAAMa,GAAN,CAAUL,WAAV;;AAEAM,YAAQC,GAAR,CAAYP,YAAYF,KAAxB;;AAEA;AACA,QAAIU,UAAUV,MAAMW,gBAAN,EAAd;AACA,QAAIC,UAAU,IAAIC,MAAMC,OAAV,CACV,CAACJ,QAAQ,CAAR,IAAaA,QAAQ,CAAR,CAAd,IAA4B,CADlB,EAEV,CAACA,QAAQ,CAAR,IAAaA,QAAQ,CAAR,CAAd,IAA4B,CAFlB,EAGV,CAACA,QAAQ,CAAR,IAAaA,QAAQ,CAAR,CAAd,IAA4B,CAHlB,CAAd;;AAMA;AACA,QAAIK,MAAM;AACNC,gBAAQhB,MAAMiB,WAAN,GAAoBC,KAApB,EADF;AAENC,wBACI,IAAIN,MAAMC,OAAV,CAAkBF,QAAQQ,CAAR,GAAY,EAA9B,EAAkCR,QAAQS,CAAR,GAAY,EAA9C,EAAkDT,QAAQU,CAAR,GAAY,EAA9D;AAHE,KAAV;;AAMA;AACA,QAAIC,SAAS;AACTC,eAAOC,OAAOC,WADL;AAETC,gBAAQF,OAAOG;AAFN,KAAb;;AAKAjC,WAAOkC,UAAP,GAAoB,CAAC7B,MAAM8B,OAAP,EAAgB9B,MAAM+B,OAAtB,EAA+B/B,MAAMgC,OAArC,CAApB;AACArC,WAAOoB,GAAP,GAAaA,GAAb;AACApB,WAAO4B,MAAP,GAAgBA,MAAhB;AACA5B,WAAOsC,MAAP;AACAtC,WAAOuC,MAAP,CAAc,CAAd;AACAC,iBAAaxC,OAAOyC,eAApB,EAAqCpC,MAAMqC,QAA3C;AACA,uBAASnC,WAAT,EAAsBN,GAAtB,EAA2BC,QAA3B,EAAqCF,MAArC;AACA2C,kBAAcpC,WAAd,EAA2BJ,QAA3B,EAAqCH,MAArC;AACH","file":"handleSeries.js","sourcesContent":["import HelpersStack from 'base/helpers/helpers.stack';\r\nimport buildGUI from './gui';\r\n\r\n/**\r\n * Visulaize incoming data\r\n */\r\nexport default function handleSeries(seriesContainer, loader, scene, camera, lut, camUtils, controls) {\r\n    // cleanup the loader and its progress bar\r\n    loader.free();\r\n    loader = null;\r\n    // prepare for slice visualization\r\n    // first stack of first series\r\n    let stack = seriesContainer[0].mergeSeries(seriesContainer)[0].stack[0];\r\n\r\n    let stackHelper = new HelpersStack(stack);\r\n    stackHelper.bbox.visible = false;\r\n    stackHelper.borderColor = '#2196F3';\r\n    stackHelper.border.visible = false;\r\n    scene.add(stackHelper);\r\n\r\n    console.log(stackHelper.stack);\r\n\r\n    // set camera\r\n    let worldbb = stack.worldBoundingBox();\r\n    let lpsDims = new THREE.Vector3(\r\n        (worldbb[1] - worldbb[0]) / 2,\r\n        (worldbb[3] - worldbb[2]) / 2,\r\n        (worldbb[5] - worldbb[4]) / 2\r\n    );\r\n\r\n    // box: {halfDimensions, center}\r\n    let box = {\r\n        center: stack.worldCenter().clone(),\r\n        halfDimensions:\r\n            new THREE.Vector3(lpsDims.x + 10, lpsDims.y + 10, lpsDims.z + 10),\r\n    };\r\n\r\n    // init and zoom\r\n    let canvas = {\r\n        width: threeD.clientWidth,\r\n        height: threeD.clientHeight,\r\n    };\r\n\r\n    camera.directions = [stack.xCosine, stack.yCosine, stack.zCosine];\r\n    camera.box = box;\r\n    camera.canvas = canvas;\r\n    camera.update();\r\n    camera.fitBox(2);\r\n    updateLabels(camera.directionsLabel, stack.modality);\r\n    buildGUI(stackHelper, lut, camUtils, camera);\r\n    hookCallbacks(stackHelper, controls, camera);\r\n}"]}